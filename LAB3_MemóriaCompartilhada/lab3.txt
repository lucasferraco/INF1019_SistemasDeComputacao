LUCAS FERRAÇO DE FREITAS – 1513012 
PEDRO GOMES BRANCO - 1113366

QUESTÃO 1) Soma de matrizes
Faça um programa para somar matrizes de acordo com o seguinte algoritmo
O primeiro processo irá criar duas matrizes preenchidas e uma terceira vazia em 3 áreas de memória compartilhada.
O seu programa deverá gerar um processo para o cálculo de cada linha da matriz solução.
O processo pai deve imprimir a matriz solução.
-----------------------------------------------------
exercicio1.c

#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

int main () {
    int i, segmento1, segmento2, segmento3, id, status;
    int * mat1, * mat2, * mat3, * bas1, * bas2, * bas3;

    // Aloca a memória compartilhada
    segmento1 = shmget(IPC_PRIVATE, 9 * sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR |  S_IWUSR);
    segmento2 = shmget(IPC_PRIVATE, 9 * sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR |  S_IWUSR);
    segmento3 = shmget(IPC_PRIVATE, 9 * sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR |  S_IWUSR);

    // associa a memória compartilhada ao processo
    mat1 = (int *) shmat(segmento1, 0, 0);
    mat2 = (int *) shmat(segmento2, 0, 0);
    mat3 = (int *) shmat(segmento3, 0, 0);

    bas1 = mat1;
    bas2 = mat2;
    bas3 = mat3;

    for (i = 0; i < 8; i++) {
        *mat1 = 1;
        mat1 += 4;

        *mat2 = 1;
        mat2 += 4;
    }
    *mat1 = 1;
    *mat2 = 1;
    mat2 += 4;

    mat1 = bas1;    
    mat2 = bas2;

    if ((id = fork()) < 0) { // Processo pai
            puts ("Erro na criação do novo processo");
            exit (-2);
    }
    else if (id == 0) { // Processo filho 1
            for (i = 0; i < 8; i++) {
                *mat3 = *mat1 + *mat2;
                mat2 += 4;
                mat1 += 4;
                mat3 += 4;
            }
            id = fork();

            if (id == 0) { // Processo filho 2
                for (i = 0; i < 8; i++) {
                    *mat3 = *mat1 + *mat2;
                    mat2 += 4;
                    mat1 += 4;
                    mat3 += 4;
                }
                id = fork();

                if (id == 0) { // Processo filho 3
                    *mat3 = *mat1 + *mat2;
                    mat2 += 4;
                    mat1 += 4;
                    mat3 += 4;
                    *mat3 = *mat1 + *mat2;
                    mat2 += 4;
                    mat1 += 4;
                    mat3 += 4;
                    *mat3 = *mat1 + *mat2;
                }
            }
    }
    else { // Processo pai
        waitpid(-1, &status, 0);

        mat3 = bas3;    
        printf ("matriz resultante:\n");

        printf ("%d ", *mat3);
        mat3 += 4;
        printf ("%d ", *mat3);
        mat3 += 4;
        printf ("%d\n", *mat3);
        mat3 += 4;
        printf ("%d ", *mat3);
        mat3 += 4;
        printf ("%d ", *mat3);
        mat3 += 4;
        printf ("%d\n", *mat3);
        mat3 += 4;
        printf ("%d ", *mat3);
        mat3 += 4;
        printf ("%d ", *mat3);
        mat3 += 4;
        printf ("%d\n", *mat3);
    }

    // Libera a memória compartilhada das matrizes
    shmdt (mat1);
    shmdt (mat2);
    shmdt (mat3);

    // Libera a memória compartilhada
    shmctl (segmento1, IPC_RMID, 0);
    shmctl (segmento2, IPC_RMID, 0);
    shmctl (segmento3, IPC_RMID, 0);

    return 0;
}

----------------------------------------------------- 
COMPILAÇÃO E EXECUÇÃO

$ gcc -o exercicio1 exercicio1.c
$ ./exercicio1 
----------------------------------------------------- 
RESULTADO

matriz resultante:
2 2 2
2 2 2
2 2 2
----------------------------------------------------- 
CONCLUSÃO

Ao separar o cálculo de linhas da matriz resultante para um processo por linha e
mantendo essa matriz em uma memória compartilhada, esse cálculo fica mais rápido,
pois o processamento feito em paralelo por cada processo é menor, logo mais rápido,
do que se calculássemos tudo no processo pai e todos enxergam o mesmo espaço de memória.
-----------------------------------------------------




QUESTÃO 2) Mensagem do Dia
Faça um programa que:
Leia a mensagem do dia do teclado
Crie uma memória compartilhada com a chave 8180
Salve a mensagem na memória
Faça um outro programa que utilize a mesma chave (8180) e exiba a mensagem do dia para o usuário.
-----------------------------------------------------
exercicio2_scanf.c

#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <stdio.h>

int main () {
    int segmento;
    char * mensagem;

    // Aloca a memória compartilhada
    segmento = shmget(8180, 500*sizeof (char), IPC_CREAT | IPC_EXCL | S_IRUSR |  S_IWUSR);
    mensagem = (char*) shmat(segmento, 0, 0);

    printf("Digite a mensagem do dia:\n");
    scanf(" %[^\n]", mensagem);
    
    return 0;
}

-----------------------------------------------------

exercicio2_printf.c

#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

int main () {
    int segmento;
    char * mensagem;

    // Aloca a memória compartilhada
    segmento = shmget (8180, 500 * sizeof(char), IPC_EXCL | S_IRUSR |  S_IWUSR);
    mensagem = (char *) shmat(segmento, 0, 0);

    printf("%s\n", mensagem);

    shmdt(mensagem);
    shmctl(segmento, IPC_RMID, 0);
    
    return 0;
}


----------------------------------------------------- 
COMPILAÇÃO E EXECUÇÃO

$ gcc -o exercicio2s exercicio2_scanf.c
$ ./exercicio2s
$ gcc -o exercicio2p exercicio2_printf.c
$ ./exercicio2p
----------------------------------------------------- 
RESULTADO

Digite a mensagem do dia:
go pats
go pats
----------------------------------------------------- 
CONCLUSÃO

Quando alocamos memória em espaço compartilhado e não a desalocamos no mesmo programa,
qualquer outro programa que saiba o endereço dessa memória pode acessar o que estiver
armazenado nela. Assim, esse recurso é um ótimo artifício para passar dados entre programas.
----------------------------------------------------- 




QUESTÃO 3) Cálculo da matriz transposta
Faça um programa paralelo para achar a transposta de uma matriz.
Crie uma matriz na memória compartilhada e leia dados do teclado para preencher a matriz (4x4)
Crie outra matriz para armazenar a matriz transposta. Gere 4 processos para calcular a transposta
onde cada processo deve transpor uma linha para a respectiva coluna da matriz transposta.
O processo pai deve imprimir a matriz original e a transposta.
-----------------------------------------------------
exercicio3.c

#include <stdio.h>
#include <stdlib.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>

void imprimirMatriz(int * mat);

int main () {
    int i, j, segmento1, segmento2, id, status, aux;
    int * mat1, * mat2, * bas1, * bas2;

    // Aloca a memória compartilhada
    segmento1 = shmget(IPC_PRIVATE, 16 * sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR |  S_IWUSR);
    segmento2 = shmget(IPC_PRIVATE, 16 * sizeof(int), IPC_CREAT | IPC_EXCL | S_IRUSR |  S_IWUSR);

    // associa a memória compartilhada ao processo
    mat1 = (int *) shmat(segmento1, 0, 0);
    mat2 = (int *) shmat(segmento2, 0, 0);

    bas1 = mat1;
    bas2 = mat2;

    printf("Entre com os numeros da matriz:\n");
    for (i = 0; i < 16; i++) {
        if (i%4 == 0) 
            printf("Linha %d: ", i/4 + 1);

        scanf(" %d", &aux);
        *mat1 = aux;
        mat1 += 4;
    }
    mat1 = bas1;

    if ((id = fork()) < 0) { // Processo pai
            puts ("Erro na criação do novo processo");
            exit (-2);
    }
    else if (id == 0) { // Processo filho 1
            for (i = 0; i < 4; i++) {
                *mat2 = *mat1;
                mat2 += 4;
                mat1 += 16;
            }

            id = fork();

            if (id == 0) { // Processo filho 2
                mat1 = bas1 + 4;
                for (i = 0; i < 4; i++) {
                    *mat2 = *mat1;
                    mat2 += 4;
                    mat1 += 16;
                }

                id = fork();

                if (id == 0) { // Processo filho 3
                    mat1 = bas1 + 8;
                    for (i = 0; i < 4; i++) {
                        *mat2 = *mat1;
                        mat2 += 4;
                        mat1 += 16;
                    }

                    id = fork();

                    if (id == 0) { // Processo filho 4
                        mat1 = bas1 + 12;
                        for (i = 0; i < 4; i++) {
                            *mat2 = *mat1;
                            mat2 += 4;
                            mat1 += 16;
                        }
                    }
                }
            }
    }
    else { // Processo pai
        sleep(1);
        waitpid(-1, &status, 0);

        mat1 = bas1;
        printf ("\nMatriz:\n");
        imprimirMatriz(mat1);

        mat2 = bas2;    
        printf ("Transposta:\n");
        imprimirMatriz(mat2);
    }

    // Libera a memória compartilhada das matrizes
    shmdt (mat1);
    shmdt (mat2);

    // Libera a memória compartilhada
    shmctl (segmento1, IPC_RMID, 0);
    shmctl (segmento2, IPC_RMID, 0);

    return 0;
}

void imprimirMatriz(int * mat) {
    printf ("%d ", *mat);
    mat += 4;
    printf ("%d ", *mat);
    mat += 4;
    printf ("%d ", *mat);
    mat += 4;
    printf ("%d\n", *mat);
    mat += 4;
    printf ("%d ", *mat);
    mat += 4;
    printf ("%d ", *mat);
    mat += 4;
    printf ("%d ", *mat);
    mat += 4;
    printf ("%d\n", *mat);
    mat += 4;
    printf ("%d ", *mat);
    mat += 4;
    printf ("%d ", *mat);
    mat += 4;
    printf ("%d ", *mat);
    mat += 4;
    printf ("%d\n", *mat);
    mat += 4;
    printf ("%d ", *mat);
    mat += 4;
    printf ("%d ", *mat);
    mat += 4;
    printf ("%d ", *mat);
    mat += 4;
    printf ("%d\n\n", *mat);
}


----------------------------------------------------- 
COMPILAÇÃO E EXECUÇÃO

$ gcc -o exercicio3 exercicio3.c
$ ./exercicio3

----------------------------------------------------- 
RESULTADO

Entre com os numeros da matriz:
Linha 1: 1 1 1 1
Linha 2: 2 2 2 2
Linha 3: 3 3 3 3
Linha 4: 4 4 4 4

Matriz:
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4

Transposta:
1 2 3 4
1 2 3 4
1 2 3 4
1 2 3 4

----------------------------------------------------- 
CONCLUSÃO

Aqui o mesmo acontece que na primeira questão, ao dividir o cálculo da matriz transposta
em diversos processos e armazená-la em um espaço de memória compartilhado, aceleramos seu cálculo. Dessa vez, só tivemos que tomar o cuidado de posicionar o ponteiro da primeira matriz 
corretamente em cada processo e percorrê-la avançando de linha em linha ao invés de elemento a elemento.
----------------------------------------------------- 