LUCAS FERRAÇO DE FREITAS – 1513012 
PEDRO GOMES BRANCO - 1113366

QUESTÃO 1) Compile e Execute os códigos apresentados nos slides anteriores. Explicando os códigos e as diferenças entre FIFO com leitura/ escrita bloqueante e não bloqueante.
No seu relatório inclua os código de leitura e escrita bloqueante e não bloqueante. E as respectivas explicações dos códigos e diferenças.
-----------------------------------------------------
Leitura não bloqueante:

lnb.c

#include <stdio.h>
#include <sys/shm.h>
#include <signal.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/types.h>

#define OPENMODE (O_RDONLY | O_NONBLOCK)
#define FIFO "minhaFifo"
int main (void)
{
   int fpFIFO;
   char ch;
   if (access(FIFO, F_OK) == -1)
   {
                  if (mkfifo (FIFO, S_IRUSR | S_IWUSR) != 0)
                  {
                            fprintf (stderr, "Erro ao criar FIFO %s\n", FIFO);
                            return -1;
}
   }
   puts ("Abrindo FIFO");
   if ((fpFIFO = open (FIFO, OPENMODE)) < 0)
   {
                  fprintf (stderr, "Erro ao abrir a FIFO %s\n", FIFO);
                  return -2;
   }
   puts ("Começando a ler...");
   while (read (fpFIFO, &ch, sizeof(ch)) > 0)
                  putchar (ch);
   puts ("Fim da leitura");
   close (fpFIFO);
return 0; 
}


Escrita não bloqueante:

enb.c
#include <stdio.h>
#include <sys/shm.h>
#include <signal.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/types.h>
#include <string.h>
 #define OPENMODE (O_WRONLY | O_NONBLOCK)
 #define FIFO "minhaFifo"
 int main (void)
 {
    int fpFIFO;
    char mensagem[] = "Melancia sem caroço";
    if (access(FIFO, F_OK) == -1)
    {
                   if (mkfifo (FIFO, S_IRUSR | S_IWUSR) != 0)
                   {
                            fprintf (stderr, "Erro ao criar FIFO %s\n", FIFO);
                            return -1;
}
    }
    puts ("Abrindo FIFO");
    if ((fpFIFO = open (FIFO, OPENMODE)) < 0)
    {
                   fprintf (stderr, "Erro ao abrir a FIFO %s\n", FIFO);
                   return -2;
    }
    puts ("Começando a escrever...");
    write(fpFIFO, mensagem, strlen(mensagem));
    puts ("Fim da escrita");
    close (fpFIFO);
    return 0;
   }


Leitura bloqueante:
lb.c

#include <stdio.h>
#include <sys/shm.h>
#include <signal.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/types.h>

#define OPENMODE (O_RDONLY)
#define FIFO "minhaFifo"
int main (void)
{
   int fpFIFO;
   char ch;
   if (access(FIFO, F_OK) == -1)
   {
                  if (mkfifo (FIFO, S_IRUSR | S_IWUSR) != 0)
                  {
                            fprintf (stderr, "Erro ao criar FIFO %s\n", FIFO);
                            return -1;
}
   }
   puts ("Abrindo FIFO");
   if ((fpFIFO = open (FIFO, OPENMODE)) < 0)
   {
                  fprintf (stderr, "Erro ao abrir a FIFO %s\n", FIFO);
                  return -2;
   }
   puts ("Começando a ler...");
   while (read (fpFIFO, &ch, sizeof(ch)) > 0)
                  putchar (ch);
   puts ("Fim da leitura");
   close (fpFIFO);
return 0; 
}


Escrita bloqueante:
eb.c

#include <stdio.h>
#include <sys/shm.h>
#include <signal.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/wait.h>
#include <stdlib.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/types.h>
#include <string.h>
 #define OPENMODE (O_WRONLY)
 #define FIFO "minhaFifo"
 int main (void)
 {
    int fpFIFO;
    char mensagem[] = "Melancia sem caroço";
    if (access(FIFO, F_OK) == -1)
    {
                   if (mkfifo (FIFO, S_IRUSR | S_IWUSR) != 0)
                   {
                            fprintf (stderr, "Erro ao criar FIFO %s\n", FIFO);
                            return -1;
}
    }
    puts ("Abrindo FIFO");
    if ((fpFIFO = open (FIFO, OPENMODE)) < 0)
    {
                   fprintf (stderr, "Erro ao abrir a FIFO %s\n", FIFO);
                   return -2;
    }
    puts ("Começando a escrever...");
    write(fpFIFO, mensagem, strlen(mensagem));
    puts ("Fim da escrita");
    close (fpFIFO);
    return 0;
  }

--------------------------------------------------- 
COMPILAÇÃO E EXECUÇÃO

$ gcc -o lnb lnb.c
$ gcc -o enb enb.c
$ gcc -o lb lb.c
$ gcc -o eb eb.c
$ ./lnb

--

$ ./enb

--

$ ./lb

--

$ ./eb
----------------------------------------------------- 
RESULTADO

Abrindo FIFO
Começando a ler...
Fim da leitura

--

Abrindo FIFO
Erro ao abrir a FIFO minhaFifo

--

Abrindo FIFO

--

Abrindo FIFO

----------------------------------------------------- 
CONCLUSÃO

A leitura nao bloqueante retorna imediatamente como se tivesse lido mesmo que essa FIFO não tenha sido aberta por outro processo. Quando a escrita nao bloqueante é executada ela procura por uma FIFO aberta para escrita mas como não encontra, a função open retorna -1 e o programa imprime o erro. Já no caso das funções que bloqueiam elas esperam a FIFO chamada por open ser criada por um outro processo. Por isso, quando executa a leitura bloqueante por exemplo ele não simplesmente executa tudo sem parar como a leitura nao bloqueante faz. Ele para assim que a FIFO é chamada no open. Quando escrita bloqueante é executada depois disso os 2 processos passam a operar sobre essa mesma FIFO e terminaram sua execução praticamente juntos.
-----------------------------------------------------


QUESTÃO 2) Abra duas seções de terminais
Na primeira, execute um programa que fica em loop lendo de uma FIFO para depois escrever na saída padrão (tela)
Na segunda, execute um programa que fica lendo da entrada padrão (teclado) e depois escreve na mesma FIFO
-----------------------------------------------------
exercicio2.c

#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
	int fifo;
	char ch;

	puts ("inicio");
	if (access ("minhaFifo", F_OK) == -1) {
		if (mkfifo ("minhaFifo", S_IRUSR | S_IWUSR) != 0) {
			puts ("Erro na criação FIFO");
			return -1;
		}
	}

	if ((fifo = open ("minhaFifo", O_RDONLY)) < 0) {
		puts ("Erro ao abrir a FIFO para leitura");
		return -1;
	}

	puts ("vai comecar a ler");
	while (read (fifo, &ch, sizeof (ch)) > 0) {
		puts ("leu\n");
		putchar (ch);
	}

	puts ("fim leitura");

	close (fifo);

	return 0;
}

exercicio21.c

#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/types.h>
#include <fcntl.h>
#include <string.h>

int main() {
	int fifo;
	char ch;

	if (access ("minhaFifo", F_OK) == -1) {
		if (mkfifo ("minhaFifo", S_IRUSR | S_IWUSR) != 0) {
			puts ("Erro na criação FIFO");
			return -1;
		}
	}

	if ((fifo = open ("minhaFifo", O_WRONLY)) < 0) {
		puts ("Erro ao abrir a FIFO");
		return -1;
	}

	puts ("Escrevendo na fifo o caracter");
	while (ch != '0') {
		scanf ("%c", &ch);
		write (fifo, &ch, 1);
	}

	close (fifo);

	return 0;
}

--------------------------------------------------- 
COMPILAÇÃO E EXECUÇÃO

$ gcc -o exercicio1 exercicio2.c
$ ./exercicio2

--

$ gcc -o exercicio21 exercicio21.c
$ ./exercicio21
----------------------------------------------------- 
RESULTADO

inicio
vai comecar a ler
leu
aleu
leu
bleu
fim leitura

--

Escrevendo na fifo o caracter
a
b
^C 
----------------------------------------------------- 
CONCLUSÃO

Criamos a fifo somente caso ela não existisse. Abrimos em cada programa a fifo, um no modo read only e outro no modo write only. No programa que lê da fifo, ele bloqueia no commando read, e espera até a fifo ter algum caracter para ser lido, quando acha o caracter, imprime na tela. No programa write, ele espera o scanf par que possa escrever na fifo. Quando terminamos o programa que escreve, automaticamente o programa que lê termina.
-----------------------------------------------------




QUESTÃO 3) Escreva um programa que primeiro cria uma FIFO e  em seguida cria dois processos filho que escrevem uma  string  na  FIFO.  O  pai dá  um  waitpid em seguida lê  as  strings  desse  FIFO e  exibe na tela 
-----------------------------------------------------
exercicio3.c

#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <wait.h>

int main() {
	int fifo, fifo2;
	char mensagem[21];
	int pid1, pid2;

	puts ("inicio");
	if (access ("minhaFifo", F_OK) == -1) {
		if (mkfifo ("minhaFifo", S_IRUSR | S_IWUSR) != 0) {
			puts ("Erro na criação FIFO");
			return -1;
		}
	}

	if ((pid1 = fork()) < 0) {
		puts( "Erro no fork 1");
	}
	else if (pid1 == 0) {
		if ((fifo = open ("minhaFifo", O_WRONLY)) < 0) {
			puts ("Erro ao abrir a FIFO para leitura e escrita");
			return -1;
		}
		strcpy(mensagem, "Oi");
		write (fifo, mensagem, strlen (mensagem));

		return 0;
	}
	else {
		if ((pid2 = fork()) < 0) {
			puts( "Erro no fork 2");
		}
		else if (pid2 == 0) {
			if ((fifo = open ("minhaFifo", O_WRONLY)) < 0) {
				puts ("Erro ao abrir a FIFO para leitura e escrita");
				return -1;
			}
			strcpy(mensagem, "Tudo bem?");
			write (fifo, mensagem, strlen (mensagem));

			return 0;
		}
		// pai
		else {
			if ((fifo2 = open ("minhaFifo", O_RDONLY)) < 0) {
				puts ("Erro ao abrir a FIFO para leitura e escrita");
				return -1;
			}
			int status;
			waitpid (pid1, &status, 0);
			waitpid (pid2, &status, 0);
			while (read (fifo2, mensagem, 100) > 0) {
				printf ("%s\n", mensagem);
			}
		}
	}


	close (fifo);

	return 0;
}


----------------------------------------------------- 
COMPILAÇÃO E EXECUÇÃO

$ gcc -o exercicio3 exercicio3.c
$ ./exercicio3
----------------------------------------------------- 
RESULTADO

inicio
OiTudo bem?
----------------------------------------------------- 
CONCLUSÃO

Criamos a fifo caso ainda não existisse. Demos open em cada processo filho, para modo escrita, e no pai para modo leitura. Nos filhos escrevemos mensagens na fifo. No pai esperamos os dois filhos terminarem e escrevemos na tela as strings da fifo.
----------------------------------------------------- 