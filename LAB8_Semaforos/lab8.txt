LUCAS FERRAÇO DE FREITAS – 1513012
PEDRO GOMES BRANCO - 1113366

QUESTÃO 1) Execute o programa dado (exemplo de uso de semáforos)
e verifique / explique sua execução.
-----------------------------------------------------
ex1.c

/* Exemplo de uso de semaforo */

#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

// inicializa o valor do semáforo
int setSemValue(int semId);

// remove o semáforo
void delSemValue(int semId);

// operação P
int semaforoP(int semId);

//operação V
int semaforoV(int semId);

int main (int argc, char * argv[]) {
  int i;
  char letra = 'o';
  int semId;

  if (argc > 1) {
    semId = semget (8752, 1, 0666 | IPC_CREAT);
    setSemValue(semId);
    letra = 'x';
    sleep (2);
  }
  else {
    while ((semId = semget (8752, 1, 0666)) < 0) {
      putchar ('.');
      fflush(stdout);
      sleep (1);
    }
  }

  for (i=0; i<10; i++) {
    semaforoP(semId);
    putchar (toupper(letra)); fflush(stdout);
    sleep(rand() %3);
    putchar (letra); fflush(stdout);
    semaforoV(semId);
    sleep(rand() %2);
  }

  printf ("\nProcesso %d terminou\n", getpid());

  if (argc > 1) {
    sleep(10);
    delSemValue(semId);
  }

  return 0;
}

int setSemValue(int semId) {
   union semun semUnion;
   semUnion.val = 1;
   return semctl(semId, 0, SETVAL, semUnion);
}

void delSemValue(int semId) {
   union semun semUnion;
   semctl(semId, 0, IPC_RMID, semUnion);
}

int semaforoP(int semId) {
   struct sembuf semB;

   semB.sem_num = 0;
   semB.sem_op = -1;
   semB.sem_flg = SEM_UNDO;

   semop(semId, &semB, 1);

   return 0;
}

int semaforoV(int semId) {
   struct sembuf semB;

   semB.sem_num = 0;
   semB.sem_op = 1;
   semB.sem_flg = SEM_UNDO;

   semop(semId, &semB, 1);

   return 0;
}
-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO

$ gcc -o ex1 ex1.c
$ ./ex1 &
$ ./ex1 1
-----------------------------------------------------
RESULTADO

$ ./ex1 &
[1] 8207
$ ../ex1. 1
OoXxOoXxOoXxOoOoXxXxOoXxOoOoXxXxOoXxOoX
Processo 8207 terminou
x
Processo 8208 terminou
[1]+  Done                    ./ex1
-----------------------------------------------------
CONCLUSÃO

Nós retiramos a union semun, pois no computador em que executamos,
ele indicou que essa union já estava declarada.
Este exercício mostra a concorrência controlada entre os processos sendo
usando semáforos. Assim, conseguimos fazer um processo esperar o outro
imprime e vice-versa.
-----------------------------------------------------




QUESTÃO 2) Produtor-Consumidor
- Escreva um programa formado por dois processos concorrentes, leitor e impressor,
  que compartilham uma área de trabalho (memória) executando um loop infinito.
  Para sincronizar as suas ações, eles fazem uso de semáforos.
- O processo leitor fica lendo caracteres da entrada padrão e colocando em um buffer
  de 16 posições. Quando o buffer está cheio o processo impressor deve imprimi-lo
  na saída padrão.
-----------------------------------------------------
ex2.c

#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/wait.h>

#define TRUE 1

// inicializa o valor do semáforo
int setSemValue(int semId);

// remove o semáforo
void delSemValue(int semId);

// operação P
int semaforoP(int semId);

//operação V
int semaforoV(int semId);

int main(int argc, char const * argv[]) {
    int semId, pid, segmento, cont = 0;
    char * mensagem, leitura, lixo;

    // Aloca a memória compartilhada
    segmento = shmget(IPC_PRIVATE, sizeof(char) * 17, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR );
    semId = semget (8752, 1, 0666 | IPC_CREAT);
    setSemValue(semId);

    // Associa a memória compartilhada ao processo
    mensagem = (char *) shmat(segmento, 0, 0);

    // Fazer consumidor entender quando o buffer esta cheio
    mensagem[16] = '\0';
    mensagem[15] = '\0';

    if((pid = fork()) == 0) { //Produtor
        while(TRUE) {
            semaforoP(semId);

            printf("Digite um caracter: ");
            scanf("%c%c", &leitura, &lixo);
            mensagem[cont] = leitura;
            cont++;

            if (cont == 16) cont = 0;

            semaforoV(semId);
            sleep(1);
        }
    }
    else { //Consumidor
        while(TRUE) {
            semaforoP(semId);
            fflush(stdout);

            if(mensagem[15] != '\0') {
                printf("\n-------------------\n");
                printf("%s\n", mensagem);
                printf("-------------------\n\n");
                mensagem[15] = '\0';
            }

            semaforoV(semId);
            sleep(2);
        }
    }

    shmdt(mensagem);
    shmctl(segmento, IPC_RMID, 0);
    delSemValue(semId);

    return 0;
}

int setSemValue(int semId) {
    union semun semUnion;
    semUnion.val = 1;
    return semctl(semId, 0, SETVAL, semUnion);
}

void delSemValue(int semId) {
    union semun semUnion;
    semctl(semId, 0, IPC_RMID, semUnion);
}

int semaforoP(int semId) {
    struct sembuf semB;

    semB.sem_num = 0;
    semB.sem_op = -1;
    semB.sem_flg = SEM_UNDO;

    semop(semId, &semB, 1);

    return 0;
}

int semaforoV(int semId) {
    struct sembuf semB;

    semB.sem_num = 0;
    semB.sem_op = 1;
    semB.sem_flg = SEM_UNDO;

    semop(semId, &semB, 1);

    return 0;
}
-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO

$ gcc -o ex2 ex2.c
$ ./ex2
-----------------------------------------------------
RESULTADO

Digite um caracter: t
Digite um caracter: e
Digite um caracter: s
Digite um caracter: t
Digite um caracter: a
Digite um caracter: n
Digite um caracter: d
Digite um caracter: o
Digite um caracter: s
Digite um caracter: e
Digite um caracter: m
Digite um caracter: a
Digite um caracter: f
Digite um caracter: o
Digite um caracter: r
Digite um caracter: o

-------------------
testandosemaforo
-------------------

Digite um caracter:
-----------------------------------------------------
CONCLUSÃO

Nós retiramos a union semun, pois no computador em que executamos,
ele indicou que essa union já estava declarada.
Com semáforos, conseguimos implementar o problema de Produtor-Consumidor
da forma correta, pois garantimos que os dois não processos não vão executar
ao mesmo tempo.
-----------------------------------------------------




QUESTÃO 3) Faça programas para alterar um valor de uma variável
na memória compartilhada. Um programa soma 1 à variável e o outro
soma 5 à variável. Utilize semáforos para alterar a variável (região crítica).
-----------------------------------------------------
ex3-1.c

#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <sys/shm.h>
#include <sys/stat.h>

// inicializa o valor do semáforo
int setSemValue(int semId);
// remove o semáforo
void delSemValue(int semId);
// operação P
int semaforoP(int semId);
//operação V
int semaforoV(int semId);

int main (int argc, char * argv[]) {
  int segmento, * soma, semId;

  // Aloca a memória compartilhada
  segmento = shmget (8180, sizeof(int), IPC_CREAT | S_IRUSR | S_IWUSR);
  semId = semget (8765  , 1, 0666 | IPC_CREAT);
  setSemValue(semId);

  // Associa a memória compartilhada ao processo
  soma = (int*) shmat (segmento, 0, 0);
  *soma = 0;

  while (1) {
    semaforoP(semId);

    *soma = (*soma) + 1;
    printf("Soma + 1: %d\n", *soma);

    sleep(rand()%3);
    semaforoV(semId);
    sleep(rand()%2);
  }

  shmdt (soma);
  shmctl (segmento, IPC_RMID, 0);
  delSemValue(semId);

  return 0;
}

int setSemValue(int semId) {
  union semun semUnion;
  semUnion.val = 1;
  return semctl(semId, 0, SETVAL, semUnion);
}

void delSemValue(int semId) {
  union semun semUnion;
  semctl(semId, 0, IPC_RMID, semUnion);
}

int semaforoP(int semId) {
  struct sembuf semB;
  semB.sem_num = 0;
  semB.sem_op = -1;
  semB.sem_flg = SEM_UNDO;
  semop(semId, &semB, 1);
  return 0;
}

int semaforoV(int semId) {
  struct sembuf semB;

  semB.sem_num = 0;
  semB.sem_op = 1;
  semB.sem_flg = SEM_UNDO;
  semop(semId, &semB, 1);

  return 0;
}
-----------------------------------------------------
ex3-2.c

#include <sys/sem.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <sys/shm.h>
#include <sys/stat.h>

// inicializa o valor do semáforo
int setSemValue(int semId);
// remove o semáforo
void delSemValue(int semId);
// operação P
int semaforoP(int semId);
//operação V
int semaforoV(int semId);

int main (int argc, char * argv[]) {
  int segmento, * soma, semId;

  // Aloca a memória compartilhada
  segmento = shmget (8180, sizeof(int), IPC_CREAT | S_IRUSR | S_IWUSR);
  semId = semget (8765  , 1, 0666 | IPC_CREAT);
  setSemValue(semId);

  // Associa a memória compartilhada ao processo
  soma = (int*) shmat (segmento, 0, 0);
  *soma = 0;

  while (1) {
    semaforoP(semId);

    *soma = (*soma) + 5;
    printf("Soma + 5: %d\n", *soma);

    sleep(rand()%3);
    semaforoV(semId);
    sleep(rand()%2);
  }

  shmdt (soma);
  shmctl (segmento, IPC_RMID, 0);
  delSemValue(semId);

  return 0;
}

int setSemValue(int semId) {
  union semun semUnion;
  semUnion.val = 1;
  return semctl(semId, 0, SETVAL, semUnion);
}

void delSemValue(int semId) {
  union semun semUnion;
  semctl(semId, 0, IPC_RMID, semUnion);
}

int semaforoP(int semId) {
  struct sembuf semB;
  semB.sem_num = 0;
  semB.sem_op = -1;
  semB.sem_flg = SEM_UNDO;
  semop(semId, &semB, 1);
  return 0;
}

int semaforoV(int semId) {
  struct sembuf semB;

  semB.sem_num = 0;
  semB.sem_op = 1;
  semB.sem_flg = SEM_UNDO;
  semop(semId, &semB, 1);

  return 0;
}
-----------------------------------------------------
COMPILAÇÃO E EXECUÇÃO

$ gcc -o ex3-1 ex3-1.c
$ gcc -o ex3-2 ex3-2.c
$ ./ex3-1 &
$ ./ex3-2
-----------------------------------------------------
RESULTADO

$ ./ex3-1 &
[1] 18856
$ ./ex3-2
Soma + 1: 1
Soma + 5: 6
Soma + 1: 7
Soma + 5: 12
Soma + 1: 13
Soma + 5: 18
Soma + 1: 19
Soma + 1: 20
Soma + 5: 25
Soma + 5: 30
Soma + 1: 31
Soma + 5: 36
Soma + 1: 37
Soma + 1: 38
Soma + 5: 43
Soma + 5: 48
Soma + 1: 49
Soma + 5: 54
...
-----------------------------------------------------
CONCLUSÃO

Nós retiramos a union semun, pois no computador em que executamos,
ele indicou que essa union já estava declarada.
Como conseguimos controlar a concorrência com os semáforos, somos
capazes de somar em uma mesma variável valores diferentes em diferentes
programas acessando o mesmo espaço de memória.
-----------------------------------------------------
