LUCAS FERRAÇO DE FREITAS – 1513012 
PEDRO GOMES BRANCO - 1113366

QUESTÃO 1) Faça um programa para localizar determinado valor em um vetor de inteiros desordenado.
O programa deve ser composto por no mínimo 4 processos filhos, em um mesmo nível,
que devem ser responsáveis por procurar o valor em uma parte do vetor cada.
Ao encontrar o valor, o processo deve imprimir:
Filho <PID> Encontrou na posição # do vetor. Caso o processo não encontre, deve imprimir:
Filho <PID> Não encontrou ocorrência do valor. 
Explique o funcionamento do seu código.
-----------------------------------------------------
exercicio1.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
	int i, j;
	int n = 13, v[13] = {31,9,4,5,6,1,3,0,5,7,8,2,12}, val = 9;
	
	for (i = 0; i < 4; i++) {
		if (fork() == 0) {
			
			for (j = i; j < n; j += 4) {
				if (v[j] == val) {
					printf("\nFilho %d Encontrou na posicao %d do vetor.\n", getpid(), j);
					exit(0);
				}
			}
			
			printf("\nFilho %d Nao encontrou ocorrencia do valor.\n", getpid());
			exit(0);
		}
	}
	
	return 0;
}
----------------------------------------------------- 
COMPILAÇÃO E EXECUÇÃO

$ gcc -o exercicio1 exercicio1.c
$ ./exercicio1 
----------------------------------------------------- 
RESULTADO

Filho 19420 Nao encontrou ocorrencia do valor.

Filho 19421 Encontrou na posicao 1 do vetor.

Filho 19422 Nao encontrou ocorrencia do valor.

Filho 19423 Nao encontrou ocorrencia do valor.
----------------------------------------------------- 
CONCLUSÃO

O processo pai se divide em 4 filhos de mesmo nível e cada processo 
percorre o vetor andando de 4 em 4 casas, onde o primeiro processo filho
começa da posição 0, o segundo filho da posição 1 e assim em diante até o
quarto filho. Desta forma, a procura pelo valor determinado é mais rápida,
pois cada processo não precisa esperar o outro para verificar sua parte do vetor.
-----------------------------------------------------




QUESTÃO 2) Faça um programa que deve realizar a soma de 2 matrizes 3 X 3.
O programa deve ser estruturado em no mínimo 3 processos que fazem a soma de cada linha da matriz.
Cada processo exibe, ao terminar a soma, os valores para a linha da matriz.
Atenção para exibir as linhas na ordem correta.
Explique o funcionamento do seu código.
Explique como você controla a exibição de cada linha da matriz na ordem correta.
-----------------------------------------------------
exercicio2.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
	int i, j;
	int M1[3][3], M2[3][3];
	
	printf("M1:\n");
	for(i = 0; i < 3; i++) {
		for(j = 0; j < 3; j++) {
			M1[i][j] = 2 + i;
			printf("%d\t", M1[i][j]);
		}
		printf("\n");
	}
	printf("\n");
	
	printf("M2:\n");
	for(i = 0; i < 3; i++) {
		for(j = 0; j < 3; j++) {
			M2[i][j] = 2 + j*i;
			printf("%d\t", M2[i][j]);
		}
		printf("\n");
	}
	printf("\n");
	
	printf("M3:\n");
	for (i = 0; i < 3; i++) {
		sleep(i);
		if (fork() == 0) {
			printf("Linha %d:\t", i);
			
			for (j = 0; j < 3; j++) {
				printf("%d\t", M1[i][j] + M2[i][j]);
			}
			printf("\n");
			exit(0);
		}
	}
	
	return 0;
}

----------------------------------------------------- 
COMPILAÇÃO E EXECUÇÃO

$ gcc -o exercicio2 exercicio2.c
$ ./exercicio2
----------------------------------------------------- 
RESULTADO

M1:
2	2	2	
3	3	3	
4	4	4	

M2:
2	2	2	
2	3	4	
2	4	6	

M3:
Linha 0:	4	4	4	
Linha 1:	5	6	7	
Linha 2:	6	8	10
----------------------------------------------------- 
CONCLUSÃO

O processo pai se divide em 3 filhos de mesmo nível e cada processo 
soma o valor das 3 casas que pertencem à sua linha correspondente.
Para garantir que a impressão seja na ordem corretas das linhas,
utilizamos a função sleep, pois ainda não aprendemos como fazer 
um processo esperar por seu irmão. Porém, como para tempo computacional
1 segundo é muito tempo, conseguimos garantir que a impressão aparece
na ordem correta.
----------------------------------------------------- 




QUESTÃO 3) Faça um programa que simule a SHELL, ou seja, o programa fica aguardando comandos, ao receber um comando, o processo pai se duplica e designa a execução do comando ao filho. Quando o filho acaba de executar, o pai volta a esperar um novo comando.

a) Teste para os seguintes comandos:
	ls - Lista os arquivos/diretórios do diretório corrente
	ps - exibe os processos que estão executando no momento 
	pwd - exibe o diretório atual
O seu programa deve permitir a execução de comandos com argumentos.
b) Teste para os seguintes comandos:
	echo "Escreva uma mensagem aqui" - exibe a mensagem entre aspas
	cat "nome de um arquivo" - exibe o contéudo do arquivo cujo nome é passado no parâmetro
	grep "palavra" "nome de um arquivo" - exibe as ocorrências da palavra dentro do arquivo informado
c) Escreva um programa qualquer, compile-o e utilize o programa SHELL para executá-lo.
Explique o funcionamento do seu código.
-----------------------------------------------------
exercicio3.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string.h>

#define TRUE 1

int main (void) {
	int status, i = 0;
	char * parameters[100], * aux;
	char entry[100];
	
	while (TRUE) {
        strcpy(entry, "");
		
		printf("Shell> ");
		scanf(" %[^\n]", entry);
		
		aux = strtok(entry, " \"");
		while (aux != NULL) {
            parameters[i] = aux;
    		aux = strtok (NULL, " \"");
    		i++;
  		}
        
        parameters[i] = NULL;
        
		if (fork() != 0) {
			waitpid(-1, &status, 0);
			i = 0;
		}
		else {
			execvp(parameters[0], parameters);
		}
		
		printf("\n");
	}
	
	return 0;
}


-----------------------------------------------------
teste.c

#include <stdio.h>

int main() {
	printf("Hello Shell!!!");

	return 0;
}

----------------------------------------------------- 
COMPILAÇÃO E EXECUÇÃO

$ gcc -o exercicio3 exercicio3.c
$ ./exercicio3
$ gcc -o teste teste.c
----------------------------------------------------- 
RESULTADO

Shell> ls
ex3		exercicio1.c	exercicio2.c	exercicio3.c	lab2.txt

Shell> ps
  PID TTY           TIME CMD
  362 ttys000    0:00.03 /Applications/iTerm.app/Contents/MacOS/iTerm2 --server
  365 ttys000    0:05.73 -zsh
14543 ttys000    0:00.00 ./ex3

Shell> pwd
/Users/pedrogomesbranco/Documents/GitHub/INF1019_SistemasDeComputacao/LAB2_Fork&Exec_Part2

Shell> echo "Mensagem de teste"
Mensagem de teste

Shell> cat "exercicio1.c"
//
//  exercicio1.c
//  INF1019
//
//  Created by Lucas Ferraço on 31/08/17.
//  Copyright © 2017 Lucas Ferraço. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
	int i, j;
	int n = 13, v[13] = {31,9,4,5,6,1,3,0,5,7,8,2,12}, val = 9;

	for (i = 0; i < 4; i++) {
		if (fork() == 0) {

			for (j = i; j < n; j += 4) {
				if (v[j] == val) {
					printf("\nFilho %d Encontrou na posicao %d do vetor.\n", getpid(), j);
					exit(0);
				}
			}

			printf("\nFilho %d Nao encontrou ocorrencia do valor.\n", getpid());
			exit(0);
		}
	}

	return 0;
}

Shell> grep "int" "exercicio1.c"
int main() {
	int i, j;
	int n = 13, v[13] = {31,9,4,5,6,1,3,0,5,7,8,2,12}, val = 9;
					printf("\nFilho %d Encontrou na posicao %d do vetor.\n", getpid(), j);
			printf("\nFilho %d Nao encontrou ocorrencia do valor.\n", getpid());

Shell> ./teste
Hello Shell!!!
Shell>

----------------------------------------------------- 
CONCLUSÃO

O processo pai lê o input do usuário como um comando de SHELL e prepara os argumentos para
que o processo filho utilize-os corretamente na chamada da função execvp.
Usamos a função strtok para interpretar o input do usuário e separá-lo por espaços em branco para passar corretamente os parâmetros para a função execvp.
Já a função execvp, nós utilizamos, pois ela acha o caminho correto para a instrução
passada como parâmetro.
----------------------------------------------------- 
